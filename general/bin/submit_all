#!/usr/bin/env python
import time
import subprocess
import random
import os
from os.path import join, expandvars, exists
from argparse import ArgumentParser

parser = ArgumentParser(prog='submit_all', 
                        description= """ Simple script to automate submitting lots
                                         of jobs to the queue, and resubmitting
                                         failed jobs. """)
parser.add_argument("-q","--queue",default='xxl')
parser.add_argument("-n",action='store_true', default=False)
parser.add_argument("file",nargs='+')
parser.add_argument("-l","--limit",type=int, help='maximum allows jobs at one time')
args=parser.parse_args()

p=subprocess.Popen(['bjobs', '-w'],stdout=subprocess.PIPE)
queue_jobs,err=p.communicate()

files = args.file
random.shuffle(files)

old_good_format = os.environ['PWD']
old_bad_format  = os.getcwd()

for file in files:

    dir=os.path.dirname(file)
    base=os.path.basename(file)

    if dir is not '': os.chdir(dir)

    # Python wil not update the (nicely formatted) $PWD
    # so here we can just replace out the poorly formatted
    # base with the nicely formatted part.
    new = os.getcwd().replace(old_bad_format,old_good_format)

    ext = os.path.splitext(file)[1]
    if ext == '.py':
        program = 'python'
    elif ext == '.sh':
        program = 'sh'
    else:
        parser.error("Unknown extension for file %s" % file)

    log = 'log.txt'

    abspath = join(new,base)

    is_in_queue = expandvars(abspath) in queue_jobs
    log_exists = exists(log)

    job_finished = log_exists and 'The output (if any) is above this job summary.' in open(log).read()
    job_failed = log_exists and job_finished and 'Successfully completed' not in open(log).read()

    if (not is_in_queue) and (not log_exists or job_failed):

        command='bsub -q %s -oo %s %s %s' % (args.queue,log,program,abspath)
        print 'Submitting Job %s' % abspath
        if args.n:
            print os.path.expandvars(command)
        else:

            if args.limit is None:
                os.system(command)
            else:
                while True:
                    num_jobs=len(os.popen("bjobs -q %s 2>/dev/null" % args.queue).readlines())-1
                    if num_jobs < args.limit:
                        break
                os.system(command)
                time.sleep(10)

    os.chdir(old_good_format)

